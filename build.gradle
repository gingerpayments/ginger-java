plugins {
    id 'java-library'
}

version = '2.1.0'

repositories {
    mavenCentral()
}

sourceSets {
    examples {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    examplesImplementation.extendsFrom implementation
    examplesRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    api 'com.squareup.okhttp3:okhttp:4.9.1'
    api 'org.json:json:20201115'

    testImplementation 'junit:junit:4.13.1'
    testImplementation("com.squareup.okhttp3:mockwebserver:4.9.1")

    examplesImplementation 'junit:junit:4.13.1'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

task examples(type: Test) {
    description = 'Runs examples.'

    testLogging {
        events "standardOut", "standardError"
        outputs.upToDateWhen { false }
    }

    if (!System.getenv('GINGER_ENDPOINT')) { throw new StopExecutionException("Please configure GINGER_ENDPOINT") }
    if (!System.getenv('GINGER_API_KEY')) { throw new StopExecutionException("Please configure GINGER_API_KEY") }

    testClassesDirs = sourceSets.examples.output.classesDirs
    classpath = sourceSets.examples.runtimeClasspath
    shouldRunAfter test
}
